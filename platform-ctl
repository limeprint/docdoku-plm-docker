#!/usr/bin/env bash

# DocDoku, Professional Open Source
# Copyright 2006 - 2020 DocDoku SARL
#
# This file is part of DocDokuPLM.
#
# DocDokuPLM is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DocDokuPLM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with DocDokuPLM.  If not, see <http://www.gnu.org/licenses/>.
#

SCRIPT_VERSION=0.0.6

# Repositories
EPLMP_SSH_URL=git@github.com:polarsys/eplmp.git
EPLMP_HTTPS_URL=https://github.com/polarsys/eplmp.git
DOCDOKU_PLM_SSH_URL=git@github.com:docdoku/docdoku-plm.git
DOCDOKU_PLM_HTTPS_URL=https://github.com/docdoku/docdoku-plm.git
DOCDOKU_PLM_CONVERSION_SERVICE_SSH_URL=git@github.com:docdoku/docdoku-plm-conversion-service.git
DOCDOKU_PLM_CONVERSION_SERVICE_HTTPS_URL=https://github.com/docdoku/docdoku-plm-conversion-service.git
DOCDOKU_WEB_FRONT_SSH_URL=git@github.com:docdoku/docdoku-web-front.git
DOCDOKU_WEB_FRONT_HTTPS_URL=https://github.com/docdoku/docdoku-web-front.git
DOCDOKU_PLM_SAMPLE_SSH_URL=git@github.com:docdoku/docdoku-plm-sample-data.git
DOCDOKU_PLM_SAMPLE_HTTPS_URL=https://github.com/docdoku/docdoku-plm-sample-data.git

# Resolve script dir (may be a symlink or sourced script)
dir () {
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     cd -P "$( dirname "$SOURCE" )" && pwd
}

SCRIPT_DIR="$(dir)"
SOURCES_DIR="${SCRIPT_DIR}/volumes/src"

quit () {
    echo "$1"
    exit "$2"
}

cd "${SCRIPT_DIR}" || quit "ERROR: Cannot find platform-ctl home directory" -1

init-volumes () {
    echo "Preparing volumes ..."
    mkdir -p "${SCRIPT_DIR}"/volumes
    mkdir -p "${SCRIPT_DIR}"/volumes/{vault,dumps,conversions,plugins,native-libs,m2,npm,autodeploy,web-front}
    chmod a+rwx "${SCRIPT_DIR}"/volumes/autodeploy
    chmod a+rwx "${SCRIPT_DIR}"/volumes/conversions
    chmod a+rwx "${SCRIPT_DIR}"/volumes/dumps
}

init-repo () {
    PROTOCOL="$1"

    if [ -z "$PROTOCOL" ]
      then
        echo "No protocol supplied, using https"
        PROTOCOL=https
    fi

    if [ "$PROTOCOL" == "ssh" ] || [  "$PROTOCOL" == "https" ] ; then
        echo "Cloning ${PROTOCOL} repositories ..."
    else
        echo "Sorry protocol $PROTOCOL is not available"
        usage
        exit 1
    fi

    if [ "$PROTOCOL" == "ssh" ]  ; then
        git clone "${EPLMP_SSH_URL}" "${SOURCES_DIR}/eplmp"
        git clone "${DOCDOKU_PLM_SSH_URL}" "${SOURCES_DIR}/docdoku-plm"
        git clone "${DOCDOKU_WEB_FRONT_SSH_URL}" "${SOURCES_DIR}/docdoku-web-front"
        git clone "${DOCDOKU_PLM_SAMPLE_SSH_URL}" "${SOURCES_DIR}/docdoku-plm-sample-data"
        git clone "${DOCDOKU_PLM_CONVERSION_SERVICE_SSH_URL}" "${SOURCES_DIR}/docdoku-plm-sconversion-service"
    else
        git clone "${EPLMP_HTTPS_URL}" "${SOURCES_DIR}/eplmp"
        git clone "${DOCDOKU_PLM_HTTPS_URL}" "${SOURCES_DIR}/docdoku-plm"
        git clone "${DOCDOKU_WEB_FRONT_HTTPS_URL}" "${SOURCES_DIR}/docdoku-web-front"
        git clone "${DOCDOKU_PLM_SAMPLE_HTTPS_URL}" "${SOURCES_DIR}/docdoku-plm-sample-data"
        git clone "${DOCDOKU_PLM_CONVERSION_SERVICE_HTTPS_URL}" "${SOURCES_DIR}/docdoku-plm-sconversion-service"
    fi
}

down() {
    echo "Stopping current containers ..."
    docker-compose down
}

up () {
    echo "Running the platform ..."
    init-volumes
    docker-compose up -d
}

restart-containers () {
  down 
  up
}

build-images (){
    # Build the base payara image with dependencies
    echo "Building base image ..." && \
    docker build -t docdokuplm:payara "${SCRIPT_DIR}/back/payara" && \
    echo "Building platform components..." && \
    docker-compose build
}

build-artifacts (){
    echo "Building artifacts ..." 
    
    docker-compose run build-env bash -c \
        "cd /src/docdoku-web-front && npm run build --unsafe-perm --quiet && \
        mvn clean install -f /src/eplmp/pom.xml && \
        mvn clean install -f /src/docdoku-plm/pom.xml && \
        mvn clean install dependency:copy-dependencies -f /src/docdoku-plm-sample-data/pom.xml" && \
        
     echo "... done" 
}

build () {
  case "$1" in
  "front")
     docker-compose run build-env bash -c "cd /src/docdoku-web-front && npm run build --unsafe-perm --quiet"
      ;;
  "eplmp")
     docker-compose run build-env bash -c "mvn clean install -f /src/eplmp/pom.xml"
      ;;
  "plm")
    docker-compose run build-env bash -c "mvn clean install -f /src/docdoku-plm/pom.xml"
      ;;
  "sample")
    docker-compose run build-env bash -c "mvn clean install dependency:copy-dependencies -f /src/docdoku-plm-sample-data/pom.xml"
      ;;
  *)
      echo "Specify target: front, eplmp, plm, sample"
      ;;
  esac
}

deploy () {
  echo "Deploying artifacts ..."

  case "$1" in
  "front")
     deploy-front
      ;;
  "eplmp")
     deploy-eplmp
      ;;
  "plm")
    deploy-plm
      ;;
  *)
      deploy-front
      deploy-eplmp
      deploy-plm
      ;;
  esac

  echo "Done"
}

deploy-front () {
    echo -e "Deploying front"
    unzip -q -o -d "${SCRIPT_DIR}"/volumes/web-front "${SOURCES_DIR}"/docdoku-web-front/target/docdoku-web-front.zip
}

deploy-eplmp () {
    echo -e "Deploying EPLMP"
    rm "${SCRIPT_DIR}"/volumes/autodeploy/eplmp-server-ear* 2> /dev/null
    rm "${SCRIPT_DIR}"/volumes/autodeploy/.autodeploystatus/eplmp-server-ear* 2> /dev/null
    cp "${SOURCES_DIR}/eplmp/eplmp-server/eplmp-server-ear/target/eplmp-server-ear.ear" "${SCRIPT_DIR}/volumes/autodeploy/"
}

deploy-plm () {
  echo -e "Deploying PLM plugins"
  rm "${SCRIPT_DIR}"/volumes/autodeploy/converter* 2> /dev/null
  rm "${SCRIPT_DIR}"/volumes/autodeploy/importer* 2> /dev/null
  rm "${SCRIPT_DIR}"/volumes/autodeploy/.autodeploystatus/converter* 2> /dev/null
  rm "${SCRIPT_DIR}"/volumes/autodeploy/.autodeploystatus/importer* 2> /dev/null

  cp "${SOURCES_DIR}/docdoku-plm/importer-attributes/importer-attributes-ear/target/"*.ear \
        "${SCRIPT_DIR}/volumes/autodeploy/"
}

logs (){
    docker-compose logs -f "$1"
}

health (){
    curl -k https://docdokuplm.local:10080/eplmp-server-rest/api/platform/health
}

list-apps (){
    docker-compose exec back /opt/payara41/bin/asadmin --user=admin list-applications
}

status () {
    docker-compose ps
    echo -e ""
    echo -e "To run a command on a container:"
    echo -e "    docker-compose exec <service_name> <command>"
    echo -e ""
    echo -e "---------------------------------------------------"
    echo -e "Disk usage"
    echo -e "Size    Path"
    du -hs "${SCRIPT_DIR}/volumes/vault"
}

run() {
    cmd="$*"
    if [ -z "$cmd" ]
      then
        echo "No command supplied"
        usage
        exit 1
    fi
    echo "Running $cmd ..."
    docker-compose run build-env "${cmd}"
}

test () {
  case "$1" in
  "front")
     docker-compose run build-env bash -c "cd /src/docdoku-web-front/tests && node run --casperjs=/usr/bin/casperjs --domain=proxy --port=10081 --protocol=https"
      ;;
  "api-java")
     docker-compose run build-env bash -c "cd /src/docdoku-plm/docdoku-api-java && mvn clean test -P running-instance -Denv.LOGIN=test -Denv.PASSWORD=test -Denv.URL=https://docdokuplm.local:10080/eplmp-server-rest/api -Denv.WORKSPACE=apitest -Denv.ROOT_LOGIN=root -Denv.ROOT_PASSWORD=root"
      ;;
  "cli")
     docker-compose run build-env bash -c "cd /src/docdoku-plm/docdoku-cli && mvn clean test -Prunning-instance -Denv.LOGIN=test -Denv.PASSWORD=test -Denv.HOST=back -Denv.CONTEXT_ROOT=/eplmp-server-rest -Denv.PORT=8080 -Denv.WORKSPACE=test -Denv.SSL=false"
      ;;
  *)
      echo "Specify target: front, api-java"
      ;;
  esac
}

create-admin () {
    do-create-account "$1" "$2" "admin"
}

create-user (){
    do-create-account "$1" "$2" "users"
}

do-create-account (){
     docker-compose exec db psql -U my_user -d my_db -c "\
       INSERT INTO account VALUES ('$1', NOW(), '', true, 'en', '$1', 'CET'); \
       INSERT INTO credential VALUES ('$1', MD5('$2')); \
       INSERT INTO usergroupmapping VALUES ('$1', '$3');"
}

asadmin () {
     docker-compose exec back bash -c "/opt/payara/appserver/bin/asadmin --user admin $1"
}

sql () {
     docker-compose exec db psql -U my_user -d my_db
}

sqldump (){
     docker-compose exec db bash -c "pg_dump -U my_user my_db > /var/data/dumps/$(date +%s).sql"
}

browser () {
    if [ -n "${BROWSER}" ] ; then
      echo -e "Using your $BROWSER env var"
      COMMAND=$BROWSER
    elif [ -x "$(command -v xdg-open)" ] ; then
      COMMAND=xdg-open
    elif [ -x "$(command -v firefox)" ] ; then
      COMMAND=firefox
    elif [ -x "$(command -v open)" ] ; then
      COMMAND=open
    else
      echo -e "Enter your browser command, or set \$BROWSER in your env vars"
      read -r COMMAND
    fi

    if [ "$1" == "dev" ] ; then
        URL=https://docdokuplm.local:10081
    else
        URL=https://docdokuplm.local:10080
    fi

    bash -c "${COMMAND} ${URL}"
}

backup-ssl () {
    mkdir -p "${SCRIPT_DIR}"/volumes/ssl
    docker cp docdoku-plm-docker_proxy:/etc/nginx/ssl/rootCA.pem "${SCRIPT_DIR}"/volumes/ssl/
    docker cp docdoku-plm-docker_proxy:/etc/nginx/ssl/cert.crt "${SCRIPT_DIR}"/volumes/ssl/
    docker cp docdoku-plm-docker_proxy:/etc/nginx/ssl/rootCA.key "${SCRIPT_DIR}"/volumes/ssl/
    docker cp docdoku-plm-docker_proxy:/etc/nginx/ssl/cert.key "${SCRIPT_DIR}"/volumes/ssl/
}

restore-ssl () {
    docker cp "${SCRIPT_DIR}"/volumes/ssl/rootCA.pem docdoku-plm-docker_proxy:/etc/nginx/ssl/
    docker cp "${SCRIPT_DIR}"/volumes/ssl/rootCA.key docdoku-plm-docker_proxy:/etc/nginx/ssl/
    docker cp "${SCRIPT_DIR}"/volumes/ssl/cert.crt docdoku-plm-docker_proxy:/etc/nginx/ssl/
    docker cp "${SCRIPT_DIR}"/volumes/ssl/cert.key docdoku-plm-docker_proxy:/etc/nginx/ssl/
    docker restart docdoku-plm-docker_proxy
}

insert-sample () {
  docker-compose run build-env bash -c "\
   cd /src/docdoku-plm-sample-data && \
   mvn clean install dependency:copy-dependencies && \
   java -classpath target/docdoku-plm-sample-data.jar:target/dependency/* com.docdoku.loaders.Main -h http://back:8080/eplmp-server-rest -u $1 -p $2"
}

reset () {
  read -r -p "Are you sure to want to reset database and uploaded files ? [y/N]" yN
  case ${yN:0:1} in
      y|Y )
          do-reset
      ;;
      * )
          exit 0
      ;;
  esac
}

recreate () {
  SERVICE=$1
  docker-compose up --force-recreate --no-deps -d "${SERVICE}"
}


do-reset () {
  echo -e "Recreating containers..." && \
  recreate db && \
  recreate back && \
  echo -e "Dropping database..." && \
  docker-compose exec db dropdb -U my_user my_db && \
  docker-compose exec db createdb -U my_user my_db && \
  echo -e "Removing uploaded files..." && \
  docker-compose exec back bash -c "rm -rf /var/lib/docdoku/vault/*" && \
  echo -e "Removing indexed data ..." && \
  recreate es && \
  docker-compose exec es bash -c "rm -rf /usr/share/elasticsearch/data/*" && \
  echo -e "\nDone, please restart the whole stack with './platform-ctl up'"
}

usage () {

    GREEN='\033[0;32m'
    NC='\033[0m'
    echo -e "${GREEN}DocDokuPLM${NC} platform-ctl"
    echo -e "  Version: ${SCRIPT_VERSION}"
    echo -e "  Usage: ${GREEN}platform-ctl <command> [arguments]${NC} "
    echo -e ""
    echo -e "Available commands:"
    echo -e ""
    echo -e "  ${GREEN}init-repo [<ssh|https>]${NC}:     Init the repositories to ./volumes/src/"
    echo -e "  ${GREEN}build-images${NC}:                Build the base docker images from docker-compose file"
    echo -e "  ${GREEN}build-artifacts${NC}:             Build the main artifacts from eplmp and docdoku-plm sources"
    echo -e "  ${GREEN}build <target>${NC}:              Build  specified artifact (target values: front, eplmp, plm, sample)"
    echo -e "  ${GREEN}test <target>${NC}:               Launch e2e tests. Target values: front, java-api)"
    echo -e "  ${GREEN}deploy [target]${NC}:             Copy the main artifacts to the autodeploy volume. Target values (front, eplmp, plm)"
    echo -e "  ${GREEN}up${NC}:                          Start the containers"
    echo -e "  ${GREEN}down${NC}:                        Stop the containers"
    echo -e "  ${GREEN}status${NC}:                      Get a status of running images"
    echo -e "  ${GREEN}health${NC}:                      Run a health-check (webservice)"
    echo -e "  ${GREEN}apps${NC}:                        List currently deployed applications"
    echo -e "  ${GREEN}logs [service]${NC}:              Read the logs from all containers or the supplied service"
    echo -e "  ${GREEN}sql${NC}:                         Connect to local database"
    echo -e "  ${GREEN}sqldump${NC}:                     Dumps the SQL database"
    echo -e "  ${GREEN}create-admin <login> <pwd>${NC}:  Create a new administrator"
    echo -e "  ${GREEN}create-user <login> <pwd>${NC}:   Create a new user"
    echo -e "  ${GREEN}browser${NC}:                     Open your web browser and reach DocDokuPLM"
    echo -e "  ${GREEN}run <command>'${NC}:              Run a custom command in build-env"
    echo -e "  ${GREEN}asadmin ['command']${NC}:         Run asadmin in payara container (accept commands)"
    echo -e "  ${GREEN}insert-sample <login> <pwd>${NC}: Insert some sample data into a new workspace"
    echo -e "  ${GREEN}recreate [service]${NC}:          Force recreate all services or the supplied service"
    echo -e "  ${GREEN}help${NC}:                        Display this lines"

    echo -e ""
}

case "$1" in
"init-repo")
   init-volumes
   init-repo "$2"
    ;;
"build-images")
   build-images
    ;;
"build-artifacts")
    build-artifacts
    ;;
"build")
    build "$2"
    ;;
"deploy")
   deploy "$2"
    ;;
"up")
    down && \
    up
    ;;
"down")
    down
    ;;
"create-admin")
    create-admin "$2" "$3"
    ;;
"create-user")
    create-user "$2" "$3"
    ;;
"logs")
    logs "$2"
    ;;
"health")
    health
    ;;
"status")
    status
    ;;
"apps")
    list-apps
    ;;
"help")
    usage
    ;;
"run")
    run "$2"
    ;;
"sql")
    sql
    ;;
"sqldump")
    sqldump
    ;;
"browser")
    browser "$2"
    ;;
"asadmin")
    asadmin "$2"
    ;;
"test")
    test "$2"
    ;;
"backup-ssl")
    backup-ssl
    ;;
"restore-ssl")
    restore-ssl
    ;;
"insert-sample")
    insert-sample "$2" "$3"
    ;;
"reset")
    reset
    ;;
"recreate")
    recreate "$2"
    ;;
*)
    usage
    ;;
esac
